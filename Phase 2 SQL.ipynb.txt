{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "805b0967",
   "metadata": {},
   "outputs": [],
   "source": [
    "import csv\n",
    "import sqlite3\n",
    "db=sqlite3.connect(\"hotels_database.db\") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0b4e4b25",
   "metadata": {},
   "outputs": [],
   "source": [
    "# declare cursor\n",
    "cursor=db.cursor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "cd54214b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sqlite3.Cursor at 0x1e251179c70>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create table 1\n",
    "cursor.execute(\"CREATE TABLE Table_1(sno INT PRIMARY KEY,'Hotel name' TEXT ,cities TEXT,location TEXT,'number of reviews' INT,'user ratings' FLOAT,'star rating' INT,'review score' FLOAT)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "2dc2b38d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6385  Records Inserted\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Read the CSV file and insert data into the table\n",
    "with open('Data1.csv', 'r', encoding='utf-8') as file:\n",
    "    no_records=0\n",
    "    csv_reader = csv.DictReader(file)\n",
    "    for row in csv_reader:\n",
    "        cursor.execute('INSERT INTO Table_1 (Sno, \"Hotel name\", cities, location, \"number of reviews\", \"user ratings\",\"star rating\",\"review score\") VALUES (?, ?, ?, ?, ?, ?, ?, ?)',\n",
    "                       (row['sno'], row['Hotel name'], row['cities'], row['location'], row['number of reviews'], row['user ratings'] , row['star rating'], row['review score']))\n",
    "        db.commit()\n",
    "        no_records += 1\n",
    "print(no_records,' Records Inserted')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "817a1b36",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sqlite3.Cursor at 0x1e251179c70>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create table 2\n",
    "cursor.execute(\"CREATE TABLE Table_2(sno INT PRIMARY KEY,'Hotel name' TEXT ,Free_wifi TEXT,Family_Rooms TEXT,Non_Smoking_Rooms TEXT ,Restaurant TEXT,Bar TEXT,Heating TEXT ,Lift TEXT,Breakfast_Cuisine1 TEXT,Breakfast_Cuisine2 TEXT ,Breakfast_Cuisine3 TEXT)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "f3c2def9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6385  Records Inserted\n"
     ]
    }
   ],
   "source": [
    "# Read the CSV file and insert data into the table\n",
    "with open('Data2.csv', 'r', encoding='utf-8') as file:\n",
    "    no_records=0\n",
    "    csv_reader = csv.DictReader(file)\n",
    "    for row in csv_reader:\n",
    "        cursor.execute('INSERT INTO Table_2 (Sno, \"Hotel name\",Free_wifi, Family_Rooms, Non_Smoking_Rooms,Restaurant, Bar, Heating, Lift, Breakfast_Cuisine1,Breakfast_Cuisine2, Breakfast_Cuisine3) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',\n",
    "                       (row['sno'], row['Hotel name'], row['Free_wifi'], row['Family_Rooms'], row['Non_Smoking_Rooms'], row['Restaurant'] , row['Bar'], row[ 'Heating'], row['Lift'], row['Breakfast_Cuisine1'] , row['Breakfast_Cuisine2'], row[ 'Breakfast_Cuisine3']))\n",
    "        db.commit()\n",
    "        no_records += 1\n",
    "print(no_records,' Records Inserted')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9a0d9c85",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sqlite3.Cursor at 0x1e251179c70>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sql=\"DROP TABLE Table_1\"\n",
    "cursor.execute(sql)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "0f06538d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sqlite3.Cursor at 0x1e251179c70>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create table 3\n",
    "cursor.execute(\"CREATE TABLE Table_3(sno INT PRIMARY KEY,'Hotel name' TEXT ,price INT,Room_type TEXT,Single_bed TEXT,Double_bed TEXT)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "9eaa4d50",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "24177  Records Inserted\n"
     ]
    }
   ],
   "source": [
    "# Read the CSV file and insert data into the table\n",
    "with open('Data3.csv', 'r', encoding='utf-8') as file:\n",
    "    no_records=0\n",
    "    csv_reader = csv.DictReader(file)\n",
    "    for row in csv_reader:\n",
    "        cursor.execute('INSERT INTO Table_3 (Sno, \"Hotel name\", price, Room_type, Single_bed, Double_bed) VALUES (?, ?, ?, ?, ?, ?)',\n",
    "                       (row['sno'], row['Hotel name'], row['price'], row['Room_type'], row['Single_bed'], row['Double_bed']))\n",
    "        db.commit()\n",
    "        no_records += 1\n",
    "print(no_records,' Records Inserted')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ad367e7",
   "metadata": {},
   "source": [
    "## Table 1\n",
    "### 1  Write a query to give  details of hotels city is Sydney and  ratings is more than 5.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "10bfa632",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sno</th>\n",
       "      <th>Hotel name</th>\n",
       "      <th>cities</th>\n",
       "      <th>location</th>\n",
       "      <th>number of reviews</th>\n",
       "      <th>user ratings</th>\n",
       "      <th>star rating</th>\n",
       "      <th>review score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3122</td>\n",
       "      <td>Central Studio Hotel Sydney</td>\n",
       "      <td>Sydney</td>\n",
       "      <td>Cnr George &amp; Quay Streets, Railway Square, Syd...</td>\n",
       "      <td>3041</td>\n",
       "      <td>9.3</td>\n",
       "      <td>4</td>\n",
       "      <td>7.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3123</td>\n",
       "      <td>Swissotel Sydney</td>\n",
       "      <td>Sydney</td>\n",
       "      <td>68 Market Street, Sydney CBD, 2000 Sydney, Aus...</td>\n",
       "      <td>3212</td>\n",
       "      <td>9.5</td>\n",
       "      <td>5</td>\n",
       "      <td>8.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3124</td>\n",
       "      <td>ibis Sydney Airport</td>\n",
       "      <td>Sydney</td>\n",
       "      <td>205 O'Riordan Street, Mascot, Mascot, 2020 Syd...</td>\n",
       "      <td>4134</td>\n",
       "      <td>8.4</td>\n",
       "      <td>4</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3125</td>\n",
       "      <td>ibis Styles Sydney Central</td>\n",
       "      <td>Sydney</td>\n",
       "      <td>27-33 Wentworth Avenue, Sydney CBD, 2010 Sydne...</td>\n",
       "      <td>5660</td>\n",
       "      <td>8.8</td>\n",
       "      <td>3</td>\n",
       "      <td>7.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3126</td>\n",
       "      <td>Great Southern Hotel Sydney</td>\n",
       "      <td>Sydney</td>\n",
       "      <td>717 George Street, Sydney CBD, 2000 Sydney, Au...</td>\n",
       "      <td>7533</td>\n",
       "      <td>9.4</td>\n",
       "      <td>4</td>\n",
       "      <td>7.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>251</th>\n",
       "      <td>3431</td>\n",
       "      <td>SKYE Suites Green Square</td>\n",
       "      <td>Sydney</td>\n",
       "      <td>8 Tweed Place, 2017 Sydney, Australia – Excell...</td>\n",
       "      <td>2150</td>\n",
       "      <td>9.6</td>\n",
       "      <td>5</td>\n",
       "      <td>9.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>252</th>\n",
       "      <td>3432</td>\n",
       "      <td>The Merchant Hotel</td>\n",
       "      <td>Sydney</td>\n",
       "      <td>6-8 Parramatta Road, Summer Hill , Summer Hill...</td>\n",
       "      <td>153</td>\n",
       "      <td>8.3</td>\n",
       "      <td>4</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>253</th>\n",
       "      <td>3433</td>\n",
       "      <td>Quest North Sydney</td>\n",
       "      <td>Sydney</td>\n",
       "      <td>223 Miller Street, North Sydney, 2060 Sydney, ...</td>\n",
       "      <td>1543</td>\n",
       "      <td>9.4</td>\n",
       "      <td>4</td>\n",
       "      <td>8.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>254</th>\n",
       "      <td>3434</td>\n",
       "      <td>Nesuto Chippendale</td>\n",
       "      <td>Sydney</td>\n",
       "      <td>47 - 49 Chippen Street, Chippendale, Chippenda...</td>\n",
       "      <td>486</td>\n",
       "      <td>9.0</td>\n",
       "      <td>4</td>\n",
       "      <td>7.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>255</th>\n",
       "      <td>3435</td>\n",
       "      <td>Lakemba Hotel</td>\n",
       "      <td>Sydney</td>\n",
       "      <td>146 Haldon Street, 2195 Sydney, Australia – Go...</td>\n",
       "      <td>250</td>\n",
       "      <td>7.7</td>\n",
       "      <td>3</td>\n",
       "      <td>6.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>256 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      sno                   Hotel name  cities  \\\n",
       "0    3122  Central Studio Hotel Sydney  Sydney   \n",
       "1    3123             Swissotel Sydney  Sydney   \n",
       "2    3124          ibis Sydney Airport  Sydney   \n",
       "3    3125   ibis Styles Sydney Central  Sydney   \n",
       "4    3126  Great Southern Hotel Sydney  Sydney   \n",
       "..    ...                          ...     ...   \n",
       "251  3431     SKYE Suites Green Square  Sydney   \n",
       "252  3432           The Merchant Hotel  Sydney   \n",
       "253  3433           Quest North Sydney  Sydney   \n",
       "254  3434           Nesuto Chippendale  Sydney   \n",
       "255  3435                Lakemba Hotel  Sydney   \n",
       "\n",
       "                                              location  number of reviews  \\\n",
       "0    Cnr George & Quay Streets, Railway Square, Syd...               3041   \n",
       "1    68 Market Street, Sydney CBD, 2000 Sydney, Aus...               3212   \n",
       "2    205 O'Riordan Street, Mascot, Mascot, 2020 Syd...               4134   \n",
       "3    27-33 Wentworth Avenue, Sydney CBD, 2010 Sydne...               5660   \n",
       "4    717 George Street, Sydney CBD, 2000 Sydney, Au...               7533   \n",
       "..                                                 ...                ...   \n",
       "251  8 Tweed Place, 2017 Sydney, Australia – Excell...               2150   \n",
       "252  6-8 Parramatta Road, Summer Hill , Summer Hill...                153   \n",
       "253  223 Miller Street, North Sydney, 2060 Sydney, ...               1543   \n",
       "254  47 - 49 Chippen Street, Chippendale, Chippenda...                486   \n",
       "255  146 Haldon Street, 2195 Sydney, Australia – Go...                250   \n",
       "\n",
       "     user ratings  star rating  review score  \n",
       "0             9.3            4           7.8  \n",
       "1             9.5            5           8.1  \n",
       "2             8.4            4           7.0  \n",
       "3             8.8            3           7.5  \n",
       "4             9.4            4           7.9  \n",
       "..            ...          ...           ...  \n",
       "251           9.6            5           9.1  \n",
       "252           8.3            4           7.0  \n",
       "253           9.4            4           8.8  \n",
       "254           9.0            4           7.8  \n",
       "255           7.7            3           6.5  \n",
       "\n",
       "[256 rows x 8 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "results=cursor.execute('Select * from Table_1 where cities=\"Sydney\" and \"user ratings\" >= 5')\n",
    "\n",
    "\n",
    "# Fetch all rows from the query results\n",
    "rows = results.fetchall()\n",
    "\n",
    "# Get the column names from the cursor description\n",
    "columns = [column[0] for column in results.description]\n",
    "\n",
    "# Create a DataFrame from the query results and column names\n",
    "df = pd.DataFrame(rows, columns=columns)\n",
    "\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eacf6a0c",
   "metadata": {},
   "source": [
    "### 2   Write a query  to find the location with the most reviews.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "509e123d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Jumeirah Village Circle Dubai, Dubai, United Arab Emirates – Great location - show map',)]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results=cursor.execute('Select location from Table_1 ORDER BY \"number of reviews\" DESC limit 1')\n",
    "\n",
    "results.fetchall()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31f4be69",
   "metadata": {},
   "source": [
    "### 3     Write a  query that  will retrieve all rows and sort them in descending order of user ratings."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "84fce3bf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sno</th>\n",
       "      <th>Hotel name</th>\n",
       "      <th>cities</th>\n",
       "      <th>location</th>\n",
       "      <th>number of reviews</th>\n",
       "      <th>user ratings</th>\n",
       "      <th>star rating</th>\n",
       "      <th>review score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>167</td>\n",
       "      <td>Boutique Ensuite Room like hotel</td>\n",
       "      <td>London</td>\n",
       "      <td>76 Camborne Road, Wandsworth, London, SW18 4BJ...</td>\n",
       "      <td>32</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>168</td>\n",
       "      <td>1 Hotel Mayfair</td>\n",
       "      <td>London</td>\n",
       "      <td>3 Berkeley Street, Westminster Borough, London...</td>\n",
       "      <td>40</td>\n",
       "      <td>10.0</td>\n",
       "      <td>5</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>209</td>\n",
       "      <td>Boutique Ensuite Room like hotel</td>\n",
       "      <td>London</td>\n",
       "      <td>76 Camborne Road, Wandsworth, London, SW18 4BJ...</td>\n",
       "      <td>32</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>330</td>\n",
       "      <td>The BoTree - Preferred Hotels and Resorts</td>\n",
       "      <td>London</td>\n",
       "      <td>30 Marylebone Lane, Westminster Borough, Londo...</td>\n",
       "      <td>1</td>\n",
       "      <td>10.0</td>\n",
       "      <td>5</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>344</td>\n",
       "      <td>The Pond House, Ensuite Rooms - East London Sh...</td>\n",
       "      <td>London</td>\n",
       "      <td>182 Lower Clapton Road, Hackney, London, E5 0Q...</td>\n",
       "      <td>39</td>\n",
       "      <td>10.0</td>\n",
       "      <td>4</td>\n",
       "      <td>9.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6380</th>\n",
       "      <td>6373</td>\n",
       "      <td>Tokyo Inn - Vacation STAY 11124v</td>\n",
       "      <td>Tokyo</td>\n",
       "      <td>143-0021 Tokyo-to, Kitamagome 2-31-6 Tokyo Inn...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6381</th>\n",
       "      <td>6378</td>\n",
       "      <td>Tokyo Inn - Vacation STAY 10249v</td>\n",
       "      <td>Tokyo</td>\n",
       "      <td>143-0021 Tokyo-to, Kitamagome 2-31-6 Tokyo Inn...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6382</th>\n",
       "      <td>6380</td>\n",
       "      <td>Tokyo Inn - Vacation STAY 11128v</td>\n",
       "      <td>Tokyo</td>\n",
       "      <td>143-0021 Tokyo-to, Kitamagome 2-31-6 Tokyo Inn...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6383</th>\n",
       "      <td>6382</td>\n",
       "      <td>Tokyo Inn - Vacation STAY 11102v</td>\n",
       "      <td>Tokyo</td>\n",
       "      <td>143-0021 Tokyo-to, Kitamagome 2-31-6 Tokyo Inn...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6384</th>\n",
       "      <td>6383</td>\n",
       "      <td>HIZ HOTEL - Vacation STAY 18549v</td>\n",
       "      <td>Tokyo</td>\n",
       "      <td>104-0041 Tokyo-to, Shintomi 1-3-3 HIZ HOTEL, J...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6385 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       sno                                         Hotel name  cities  \\\n",
       "0      167                   Boutique Ensuite Room like hotel  London   \n",
       "1      168                                    1 Hotel Mayfair  London   \n",
       "2      209                   Boutique Ensuite Room like hotel  London   \n",
       "3      330          The BoTree - Preferred Hotels and Resorts  London   \n",
       "4      344  The Pond House, Ensuite Rooms - East London Sh...  London   \n",
       "...    ...                                                ...     ...   \n",
       "6380  6373                   Tokyo Inn - Vacation STAY 11124v   Tokyo   \n",
       "6381  6378                   Tokyo Inn - Vacation STAY 10249v   Tokyo   \n",
       "6382  6380                   Tokyo Inn - Vacation STAY 11128v   Tokyo   \n",
       "6383  6382                   Tokyo Inn - Vacation STAY 11102v   Tokyo   \n",
       "6384  6383                   HIZ HOTEL - Vacation STAY 18549v   Tokyo   \n",
       "\n",
       "                                               location  number of reviews  \\\n",
       "0     76 Camborne Road, Wandsworth, London, SW18 4BJ...                 32   \n",
       "1     3 Berkeley Street, Westminster Borough, London...                 40   \n",
       "2     76 Camborne Road, Wandsworth, London, SW18 4BJ...                 32   \n",
       "3     30 Marylebone Lane, Westminster Borough, Londo...                  1   \n",
       "4     182 Lower Clapton Road, Hackney, London, E5 0Q...                 39   \n",
       "...                                                 ...                ...   \n",
       "6380  143-0021 Tokyo-to, Kitamagome 2-31-6 Tokyo Inn...                  0   \n",
       "6381  143-0021 Tokyo-to, Kitamagome 2-31-6 Tokyo Inn...                  0   \n",
       "6382  143-0021 Tokyo-to, Kitamagome 2-31-6 Tokyo Inn...                  0   \n",
       "6383  143-0021 Tokyo-to, Kitamagome 2-31-6 Tokyo Inn...                  0   \n",
       "6384  104-0041 Tokyo-to, Shintomi 1-3-3 HIZ HOTEL, J...                  0   \n",
       "\n",
       "      user ratings  star rating  review score  \n",
       "0             10.0            0           7.2  \n",
       "1             10.0            5           9.0  \n",
       "2             10.0            0           7.2  \n",
       "3             10.0            5          10.0  \n",
       "4             10.0            4           9.8  \n",
       "...            ...          ...           ...  \n",
       "6380           0.0            0           0.0  \n",
       "6381           0.0            0           0.0  \n",
       "6382           0.0            0           0.0  \n",
       "6383           0.0            0           0.0  \n",
       "6384           0.0            0           0.0  \n",
       "\n",
       "[6385 rows x 8 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results=cursor.execute('Select * from Table_1 ORDER BY \"user ratings\" DESC')\n",
    "\n",
    "# Fetch all rows from the query results\n",
    "rows = results.fetchall()\n",
    "\n",
    "# Get the column names from the cursor description\n",
    "col = [column[0] for column in results.description]\n",
    "\n",
    "# Create a DataFrame from the query results and column names\n",
    "df2 = pd.DataFrame(rows, columns=col)\n",
    "\n",
    "df2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0484e2fb",
   "metadata": {},
   "source": [
    "### 4   Write a query that  retrieves rows where the star rating is greater than or equal to 4.0 and sorts them in descending order of review score."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "7d460667",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sno</th>\n",
       "      <th>Hotel name</th>\n",
       "      <th>cities</th>\n",
       "      <th>location</th>\n",
       "      <th>number of reviews</th>\n",
       "      <th>user ratings</th>\n",
       "      <th>star rating</th>\n",
       "      <th>review score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>330</td>\n",
       "      <td>The BoTree - Preferred Hotels and Resorts</td>\n",
       "      <td>London</td>\n",
       "      <td>30 Marylebone Lane, Westminster Borough, Londo...</td>\n",
       "      <td>1</td>\n",
       "      <td>10.0</td>\n",
       "      <td>5</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1169</td>\n",
       "      <td>Crystal Suites at Axon Residence near Pavilion</td>\n",
       "      <td>Kuala Lumpur</td>\n",
       "      <td>Jalan Walter Granier A-30-12, Bukit Bintang, 5...</td>\n",
       "      <td>4</td>\n",
       "      <td>10.0</td>\n",
       "      <td>5</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1222</td>\n",
       "      <td>Sentral Suites KL Sentral by The Cynefin</td>\n",
       "      <td>Kuala Lumpur</td>\n",
       "      <td>248 Jalan Tun Sambanthan, Brickfields, 50400 K...</td>\n",
       "      <td>1</td>\n",
       "      <td>10.0</td>\n",
       "      <td>5</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1236</td>\n",
       "      <td>Crystal Suites at Axon Residence near Pavilion</td>\n",
       "      <td>Kuala Lumpur</td>\n",
       "      <td>Jalan Walter Granier A-30-12, Bukit Bintang, 5...</td>\n",
       "      <td>4</td>\n",
       "      <td>10.0</td>\n",
       "      <td>5</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1268</td>\n",
       "      <td>Platinum Suites KLCC By YA Noor</td>\n",
       "      <td>Kuala Lumpur</td>\n",
       "      <td>1020 Jalan Sultan Ismail, 50250 Kuala Lumpur, ...</td>\n",
       "      <td>1</td>\n",
       "      <td>10.0</td>\n",
       "      <td>5</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2483</th>\n",
       "      <td>6270</td>\n",
       "      <td>上野超豪华4人间，上野公园3分钟 地铁1分钟 位置绝佳超级繁华 免费wifi Dyson吹风...</td>\n",
       "      <td>Tokyo</td>\n",
       "      <td>113-0034 Tokyo-to, 3-27-11 汤岛, Japan – Show ma...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2484</th>\n",
       "      <td>6271</td>\n",
       "      <td>Tokyo Cherry Blooming Hotel Ueno 东京超级中心上野公园3分钟...</td>\n",
       "      <td>Tokyo</td>\n",
       "      <td>113-0034 Tokyo-to, 3-27-11 汤岛, Japan – Show ma...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2485</th>\n",
       "      <td>6272</td>\n",
       "      <td>Tokyo Cherry Blooming Hotel Ueno 东京超级中心上野公园3分钟...</td>\n",
       "      <td>Tokyo</td>\n",
       "      <td>113-0034 Tokyo-to, 3-27-11 汤岛, Japan – Show ma...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2486</th>\n",
       "      <td>6273</td>\n",
       "      <td>Tokyo Cherry Blooming Hotel Ueno 东京超级中心上野公园3分钟...</td>\n",
       "      <td>Tokyo</td>\n",
       "      <td>113-0034 Tokyo-to, 3-27-11 汤岛, Japan – Show ma...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2487</th>\n",
       "      <td>6274</td>\n",
       "      <td>Tokyo Cherry Blooming Hotel Ueno 东京超级中心上野公园3分钟...</td>\n",
       "      <td>Tokyo</td>\n",
       "      <td>113-0034 Tokyo-to, 3-27-11 汤岛, Japan – Show ma...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2488 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       sno                                         Hotel name        cities  \\\n",
       "0      330          The BoTree - Preferred Hotels and Resorts        London   \n",
       "1     1169     Crystal Suites at Axon Residence near Pavilion  Kuala Lumpur   \n",
       "2     1222           Sentral Suites KL Sentral by The Cynefin  Kuala Lumpur   \n",
       "3     1236     Crystal Suites at Axon Residence near Pavilion  Kuala Lumpur   \n",
       "4     1268                    Platinum Suites KLCC By YA Noor  Kuala Lumpur   \n",
       "...    ...                                                ...           ...   \n",
       "2483  6270  上野超豪华4人间，上野公园3分钟 地铁1分钟 位置绝佳超级繁华 免费wifi Dyson吹风...         Tokyo   \n",
       "2484  6271  Tokyo Cherry Blooming Hotel Ueno 东京超级中心上野公园3分钟...         Tokyo   \n",
       "2485  6272  Tokyo Cherry Blooming Hotel Ueno 东京超级中心上野公园3分钟...         Tokyo   \n",
       "2486  6273  Tokyo Cherry Blooming Hotel Ueno 东京超级中心上野公园3分钟...         Tokyo   \n",
       "2487  6274  Tokyo Cherry Blooming Hotel Ueno 东京超级中心上野公园3分钟...         Tokyo   \n",
       "\n",
       "                                               location  number of reviews  \\\n",
       "0     30 Marylebone Lane, Westminster Borough, Londo...                  1   \n",
       "1     Jalan Walter Granier A-30-12, Bukit Bintang, 5...                  4   \n",
       "2     248 Jalan Tun Sambanthan, Brickfields, 50400 K...                  1   \n",
       "3     Jalan Walter Granier A-30-12, Bukit Bintang, 5...                  4   \n",
       "4     1020 Jalan Sultan Ismail, 50250 Kuala Lumpur, ...                  1   \n",
       "...                                                 ...                ...   \n",
       "2483  113-0034 Tokyo-to, 3-27-11 汤岛, Japan – Show ma...                  0   \n",
       "2484  113-0034 Tokyo-to, 3-27-11 汤岛, Japan – Show ma...                  0   \n",
       "2485  113-0034 Tokyo-to, 3-27-11 汤岛, Japan – Show ma...                  0   \n",
       "2486  113-0034 Tokyo-to, 3-27-11 汤岛, Japan – Show ma...                  0   \n",
       "2487  113-0034 Tokyo-to, 3-27-11 汤岛, Japan – Show ma...                  0   \n",
       "\n",
       "      user ratings  star rating  review score  \n",
       "0             10.0            5          10.0  \n",
       "1             10.0            5          10.0  \n",
       "2             10.0            5          10.0  \n",
       "3             10.0            5          10.0  \n",
       "4             10.0            5          10.0  \n",
       "...            ...          ...           ...  \n",
       "2483           0.0            5           0.0  \n",
       "2484           0.0            5           0.0  \n",
       "2485           0.0            4           0.0  \n",
       "2486           0.0            4           0.0  \n",
       "2487           0.0            4           0.0  \n",
       "\n",
       "[2488 rows x 8 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results=cursor.execute('Select * from Table_1 where \"star rating\" >=4  ORDER BY \"review score\" DESC')\n",
    "\n",
    "# Fetch all rows from the query results\n",
    "rows = results.fetchall()\n",
    "\n",
    "# Get the column names from the cursor description\n",
    "col = [column[0] for column in results.description]\n",
    "\n",
    "# Create a DataFrame from the query results and column names\n",
    "df3 = pd.DataFrame(rows, columns=col)\n",
    "\n",
    "df3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "143828ec",
   "metadata": {},
   "source": [
    "### 5   Write a query to count the number of hotels in each city."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "896f8f1b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cities</th>\n",
       "      <th>sno</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Berlin</td>\n",
       "      <td>450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Birmingham</td>\n",
       "      <td>72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Dubai</td>\n",
       "      <td>598</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Kuala Lumpur</td>\n",
       "      <td>592</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>London</td>\n",
       "      <td>923</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Manchester</td>\n",
       "      <td>87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Melbourne</td>\n",
       "      <td>267</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>New Delhi</td>\n",
       "      <td>997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Paris</td>\n",
       "      <td>999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Sydney</td>\n",
       "      <td>314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Tokyo</td>\n",
       "      <td>999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Toronto</td>\n",
       "      <td>87</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          cities  sno\n",
       "0         Berlin  450\n",
       "1     Birmingham   72\n",
       "2          Dubai  598\n",
       "3   Kuala Lumpur  592\n",
       "4         London  923\n",
       "5     Manchester   87\n",
       "6      Melbourne  267\n",
       "7      New Delhi  997\n",
       "8          Paris  999\n",
       "9         Sydney  314\n",
       "10         Tokyo  999\n",
       "11       Toronto   87"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results=cursor.execute('SELECT cities, COUNT(*) AS sno FROM Table_1 GROUP BY cities')\n",
    "\n",
    "# Fetch all rows from the query results\n",
    "rows = results.fetchall()\n",
    "\n",
    "# Get the column names from the cursor description\n",
    "col = [column[0] for column in results.description]\n",
    "\n",
    "# Create a DataFrame from the query results and column names\n",
    "df4 = pd.DataFrame(rows, columns=col)\n",
    "\n",
    "df4"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb04de86",
   "metadata": {},
   "source": [
    "## Table 2\n",
    "\n",
    "\n",
    "\n",
    "### 1   Write a query to retrieve hotels that have both a restaurant and a bar"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "e545b3db",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hotel name</th>\n",
       "      <th>Restaurant</th>\n",
       "      <th>Bar</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Milton Manchester Hotel</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Holiday Inn Express Manchester East, an IHG Hotel</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Native Manchester</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Hilton Garden Inn Manchester Emirates Old Traf...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>YOTEL Manchester Deansgate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1575</th>\n",
       "      <td>Hotel Chinzanso Tokyo</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1576</th>\n",
       "      <td>Ueno Terminal Hotel</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1577</th>\n",
       "      <td>THE skM TOKYO HOTEL &amp; DINING</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1578</th>\n",
       "      <td>Bulgari Hotel Tokyo</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1579</th>\n",
       "      <td>BELLUSTAR TOKYO, A Pan Pacific Hotel</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1580 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             Hotel name Restaurant  Bar\n",
       "0                               Milton Manchester Hotel        Yes  Yes\n",
       "1     Holiday Inn Express Manchester East, an IHG Hotel        Yes  Yes\n",
       "2                                     Native Manchester        Yes  Yes\n",
       "3     Hilton Garden Inn Manchester Emirates Old Traf...        Yes  Yes\n",
       "4                            YOTEL Manchester Deansgate        Yes  Yes\n",
       "...                                                 ...        ...  ...\n",
       "1575                              Hotel Chinzanso Tokyo        Yes  Yes\n",
       "1576                                Ueno Terminal Hotel        Yes  Yes\n",
       "1577                       THE skM TOKYO HOTEL & DINING        Yes  Yes\n",
       "1578                                Bulgari Hotel Tokyo        Yes  Yes\n",
       "1579               BELLUSTAR TOKYO, A Pan Pacific Hotel        Yes  Yes\n",
       "\n",
       "[1580 rows x 3 columns]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results=cursor.execute('SELECT \"Hotel name\",Restaurant,Bar FROM Table_2 where Restaurant= \"Yes\" and Bar=\"Yes\" ')\n",
    "\n",
    "# Fetch all rows from the query results\n",
    "rows = results.fetchall()\n",
    "\n",
    "# Get the column names from the cursor description\n",
    "col = [column[0] for column in results.description]\n",
    "\n",
    "# Create a DataFrame from the query results and column names\n",
    "df5 = pd.DataFrame(rows, columns=col)\n",
    "\n",
    "df5"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36ecbc17",
   "metadata": {},
   "source": [
    "### 2  Write a query to retrieve hotels that offer free WiFi and have family rooms."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "d329d4b9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hotel name</th>\n",
       "      <th>Free_wifi</th>\n",
       "      <th>Family_Rooms</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Residence Inn by Marriott Manchester Piccadilly</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ibis Budget Manchester Centre Pollard Street</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Milton Manchester Hotel</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Holiday Inn Express Manchester East, an IHG Hotel</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Native Manchester</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3444</th>\n",
       "      <td>japan house sugamo</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3445</th>\n",
       "      <td>COCOSHUKU Asakusa Kuramae</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3446</th>\n",
       "      <td>MIMARU Tokyo STATION EAST</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3447</th>\n",
       "      <td>japan house edogawabashi</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3448</th>\n",
       "      <td>moire HOTEL YOSHIWARA</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3449 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             Hotel name Free_wifi Family_Rooms\n",
       "0       Residence Inn by Marriott Manchester Piccadilly       Yes          Yes\n",
       "1          ibis Budget Manchester Centre Pollard Street       Yes          Yes\n",
       "2                               Milton Manchester Hotel       Yes          Yes\n",
       "3     Holiday Inn Express Manchester East, an IHG Hotel       Yes          Yes\n",
       "4                                     Native Manchester       Yes          Yes\n",
       "...                                                 ...       ...          ...\n",
       "3444                                 japan house sugamo       Yes          Yes\n",
       "3445                          COCOSHUKU Asakusa Kuramae       Yes          Yes\n",
       "3446                          MIMARU Tokyo STATION EAST       Yes          Yes\n",
       "3447                           japan house edogawabashi       Yes          Yes\n",
       "3448                              moire HOTEL YOSHIWARA       Yes          Yes\n",
       "\n",
       "[3449 rows x 3 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results=cursor.execute('SELECT \"Hotel name\",Free_wifi,Family_Rooms FROM Table_2 where Free_wifi= \"Yes\" and Family_Rooms=\"Yes\" ')\n",
    "\n",
    "# Fetch all rows from the query results\n",
    "rows = results.fetchall()\n",
    "\n",
    "# Get the column names from the cursor description\n",
    "col = [column[0] for column in results.description]\n",
    "\n",
    "# Create a DataFrame from the query results and column names\n",
    "df6 = pd.DataFrame(rows, columns=col)\n",
    "\n",
    "df6"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff4ae728",
   "metadata": {},
   "source": [
    "### 3     Write a query to count the occurrences of each breakfast cuisine type."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "2401d0d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cuisine_type</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>African</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>American</td>\n",
       "      <td>268</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Argentinian</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Asian</td>\n",
       "      <td>136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Australian</td>\n",
       "      <td>144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Austrian</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Belgian</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Brazilian</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Breakfast</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>British</td>\n",
       "      <td>223</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Brunch</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Cambodian</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Cantonese</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Caribbean</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Chinese</td>\n",
       "      <td>230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Dinner</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Dutch</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Ethiopian</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>European</td>\n",
       "      <td>240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>French</td>\n",
       "      <td>188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>German</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Greek</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Grill/BBQ</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Indian</td>\n",
       "      <td>393</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Indonesian</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>International</td>\n",
       "      <td>483</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Irish</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Italian</td>\n",
       "      <td>184</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Japanese</td>\n",
       "      <td>141</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Korean</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Latin</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>Local</td>\n",
       "      <td>161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>Lunch</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>Malaysian</td>\n",
       "      <td>72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>Mediterranean</td>\n",
       "      <td>90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>Mexican</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>Middle</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>Modern</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>Moroccan</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>Nepalese</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>Peruvian</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>Pizza</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>Russian</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>Scottish</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>Seafood</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>Sichuan</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>Singaporean</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>Spanish</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>Steakhouse</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>Sushi</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>Tex-Mex</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>Thai</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>Traditional</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>Turkish</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>Vietnamese</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     cuisine_type  count\n",
       "0         African     35\n",
       "1        American    268\n",
       "2     Argentinian     10\n",
       "3           Asian    136\n",
       "4      Australian    144\n",
       "5        Austrian      3\n",
       "6         Belgian      5\n",
       "7       Brazilian      4\n",
       "8       Breakfast     17\n",
       "9         British    223\n",
       "10         Brunch      7\n",
       "11      Cambodian      2\n",
       "12      Cantonese      3\n",
       "13      Caribbean      3\n",
       "14        Chinese    230\n",
       "15         Dinner      8\n",
       "16          Dutch      1\n",
       "17      Ethiopian      1\n",
       "18       European    240\n",
       "19         French    188\n",
       "20         German     42\n",
       "21          Greek      3\n",
       "22      Grill/BBQ     22\n",
       "23         Indian    393\n",
       "24     Indonesian     10\n",
       "25  International    483\n",
       "26          Irish      3\n",
       "27        Italian    184\n",
       "28       Japanese    141\n",
       "29         Korean      5\n",
       "30          Latin      1\n",
       "31          Local    161\n",
       "32          Lunch     14\n",
       "33      Malaysian     72\n",
       "34  Mediterranean     90\n",
       "35        Mexican     15\n",
       "36         Middle     20\n",
       "37         Modern      3\n",
       "38       Moroccan      3\n",
       "39       Nepalese      7\n",
       "40       Peruvian      4\n",
       "41          Pizza     42\n",
       "42        Russian      3\n",
       "43       Scottish      1\n",
       "44        Seafood     26\n",
       "45        Sichuan      1\n",
       "46    Singaporean      3\n",
       "47        Spanish     27\n",
       "48     Steakhouse     25\n",
       "49          Sushi      2\n",
       "50        Tex-Mex      2\n",
       "51           Thai     13\n",
       "52    Traditional      1\n",
       "53        Turkish      7\n",
       "54     Vietnamese      3"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = cursor.execute(\"SELECT cuisine_type, COUNT(*) AS count FROM (\\\n",
    "                           SELECT Breakfast_Cuisine1 AS cuisine_type FROM Table_2 WHERE Breakfast_Cuisine1 NOT LIKE 'No' \\\n",
    "                           UNION ALL \\\n",
    "                           SELECT Breakfast_Cuisine2 AS cuisine_type FROM Table_2 WHERE Breakfast_Cuisine2 NOT LIKE 'No' \\\n",
    "                           UNION ALL \\\n",
    "                           SELECT Breakfast_Cuisine3 AS cuisine_type FROM Table_2 WHERE Breakfast_Cuisine3 NOT LIKE 'No' \\\n",
    "                           ) AS combined_cuisines \\\n",
    "                           GROUP BY cuisine_type\")\n",
    "\n",
    "# Fetch all rows from the query results\n",
    "rows = results.fetchall()\n",
    "\n",
    "# Get the column names from the cursor description\n",
    "col = [column[0] for column in results.description]\n",
    "\n",
    "# Create a DataFrame from the query results and column names\n",
    "df7 = pd.DataFrame(rows, columns=col)\n",
    "\n",
    "df7"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "312a3c14",
   "metadata": {},
   "source": [
    "### 4   Write a query to retrieve hotels that offer a certain(Asian)  breakfast cuisine ."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "6b009071",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hotel name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ibis London Stratford</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Shangri-La The Shard, London</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Park Plaza London Riverbank</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Millennium Gloucester Hotel London</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Pan Pacific London</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>131</th>\n",
       "      <td>Dormy Inn Ueno Okachimachi</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>132</th>\n",
       "      <td>Tokyo Bay Ariake Washington Hotel</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>133</th>\n",
       "      <td>APA Hotel Ueno Ekimae</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>134</th>\n",
       "      <td>New Otani Inn Tokyo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>135</th>\n",
       "      <td>Hotel Comfact</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>136 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                             Hotel name\n",
       "0                 ibis London Stratford\n",
       "1          Shangri-La The Shard, London\n",
       "2           Park Plaza London Riverbank\n",
       "3    Millennium Gloucester Hotel London\n",
       "4                    Pan Pacific London\n",
       "..                                  ...\n",
       "131          Dormy Inn Ueno Okachimachi\n",
       "132   Tokyo Bay Ariake Washington Hotel\n",
       "133               APA Hotel Ueno Ekimae\n",
       "134                 New Otani Inn Tokyo\n",
       "135                       Hotel Comfact\n",
       "\n",
       "[136 rows x 1 columns]"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results=cursor.execute('SELECT \"Hotel name\" FROM Table_2 where Breakfast_Cuisine1 = \"Asian\" OR Breakfast_Cuisine2 = \"Asian\" OR Breakfast_Cuisine3 = \"Asian\" ')\n",
    "\n",
    "# Fetch all rows from the query results\n",
    "rows = results.fetchall()\n",
    "\n",
    "# Get the column names from the cursor description\n",
    "col = [column[0] for column in results.description]\n",
    "\n",
    "# Create a DataFrame from the query results and column names\n",
    "df8 = pd.DataFrame(rows, columns=col)\n",
    "\n",
    "df8"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0e0eeb8",
   "metadata": {},
   "source": [
    "### 5   Write a query to see whether an hotel has all amenities such as Heating, Lift and Bar."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "65ba3c15",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hotel name</th>\n",
       "      <th>Free_wifi</th>\n",
       "      <th>Family_Rooms</th>\n",
       "      <th>Non_Smoking_Rooms</th>\n",
       "      <th>Restaurant</th>\n",
       "      <th>Bar</th>\n",
       "      <th>Heating</th>\n",
       "      <th>Lift</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Milton Manchester Hotel</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Holiday Inn Express Manchester East, an IHG Hotel</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Native Manchester</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Hilton Garden Inn Manchester Emirates Old Traf...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>YOTEL Manchester Deansgate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>533</th>\n",
       "      <td>HOTEL GROOVE SHINJUKU, A PARKROYAL Hotel</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>534</th>\n",
       "      <td>THE TOURIST HOTEL &amp; Cafe AKIHABARA</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>535</th>\n",
       "      <td>Cerulean Tower Tokyu Hotel, A Pan Pacific Part...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>536</th>\n",
       "      <td>Hotel Chinzanso Tokyo</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>537</th>\n",
       "      <td>Bulgari Hotel Tokyo</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>538 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                            Hotel name Free_wifi Family_Rooms  \\\n",
       "0                              Milton Manchester Hotel       Yes          Yes   \n",
       "1    Holiday Inn Express Manchester East, an IHG Hotel       Yes          Yes   \n",
       "2                                    Native Manchester       Yes          Yes   \n",
       "3    Hilton Garden Inn Manchester Emirates Old Traf...       Yes          Yes   \n",
       "4                           YOTEL Manchester Deansgate       Yes          Yes   \n",
       "..                                                 ...       ...          ...   \n",
       "533           HOTEL GROOVE SHINJUKU, A PARKROYAL Hotel       Yes          Yes   \n",
       "534                 THE TOURIST HOTEL & Cafe AKIHABARA       Yes          Yes   \n",
       "535  Cerulean Tower Tokyu Hotel, A Pan Pacific Part...       Yes          Yes   \n",
       "536                              Hotel Chinzanso Tokyo       Yes          Yes   \n",
       "537                                Bulgari Hotel Tokyo       Yes          Yes   \n",
       "\n",
       "    Non_Smoking_Rooms Restaurant  Bar Heating Lift  \n",
       "0                 Yes        Yes  Yes     Yes  Yes  \n",
       "1                 Yes        Yes  Yes     Yes  Yes  \n",
       "2                 Yes        Yes  Yes     Yes  Yes  \n",
       "3                 Yes        Yes  Yes     Yes  Yes  \n",
       "4                 Yes        Yes  Yes     Yes  Yes  \n",
       "..                ...        ...  ...     ...  ...  \n",
       "533               Yes        Yes  Yes     Yes  Yes  \n",
       "534               Yes        Yes  Yes     Yes  Yes  \n",
       "535               Yes        Yes  Yes     Yes  Yes  \n",
       "536               Yes        Yes  Yes     Yes  Yes  \n",
       "537               Yes        Yes  Yes     Yes  Yes  \n",
       "\n",
       "[538 rows x 8 columns]"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results=cursor.execute('SELECT \"Hotel name\",Free_wifi,Family_Rooms,Non_Smoking_Rooms,Restaurant,Bar,Heating,Lift FROM Table_2 where  Free_wifi= \"Yes\" AND Family_Rooms= \"Yes\" AND Non_Smoking_Rooms= \"Yes\" AND Restaurant= \"Yes\" AND Bar= \"Yes\" AND Heating= \"Yes\" AND Lift= \"Yes\" ')\n",
    "\n",
    "# Fetch all rows from the query results\n",
    "rows = results.fetchall()\n",
    "\n",
    "# Get the column names from the cursor description\n",
    "col = [column[0] for column in results.description]\n",
    "\n",
    "# Create a DataFrame from the query results and column names\n",
    "df9 = pd.DataFrame(rows, columns=col)\n",
    "\n",
    "df9"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "216303df",
   "metadata": {},
   "source": [
    "## Table 3 :\n",
    "\n",
    "\n",
    "\n",
    "### 1  Write SQL query to retrieve hotels that offer double bed rooms and sort them by price in descending order."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "febfa417",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sno</th>\n",
       "      <th>Hotel name</th>\n",
       "      <th>price</th>\n",
       "      <th>Room_type</th>\n",
       "      <th>Single_bed</th>\n",
       "      <th>Double_bed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>15628</td>\n",
       "      <td>Hôtel Le Royal Monceau Raffles Paris</td>\n",
       "      <td>2210576</td>\n",
       "      <td>Suite</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>15627</td>\n",
       "      <td>Hôtel Le Royal Monceau Raffles Paris</td>\n",
       "      <td>2122632</td>\n",
       "      <td>Suite</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>15626</td>\n",
       "      <td>Hôtel Le Royal Monceau Raffles Paris</td>\n",
       "      <td>2034687</td>\n",
       "      <td>Suite</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>16218</td>\n",
       "      <td>Le Bristol Paris - an Oetker Collection Hotel</td>\n",
       "      <td>1758893</td>\n",
       "      <td>Suite</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>16170</td>\n",
       "      <td>La Réserve Paris Hotel &amp; Spa</td>\n",
       "      <td>1332361</td>\n",
       "      <td>Suite</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15597</th>\n",
       "      <td>9362</td>\n",
       "      <td>OYO Flagship The Crown Inn</td>\n",
       "      <td>589</td>\n",
       "      <td>Room</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15598</th>\n",
       "      <td>8480</td>\n",
       "      <td>Hotel Galaxy</td>\n",
       "      <td>500</td>\n",
       "      <td>Room</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15599</th>\n",
       "      <td>8503</td>\n",
       "      <td>OYO Flagship Hotel Paradise</td>\n",
       "      <td>500</td>\n",
       "      <td>Room</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15600</th>\n",
       "      <td>9133</td>\n",
       "      <td>OYO Muskan Guest House</td>\n",
       "      <td>433</td>\n",
       "      <td>Room</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15601</th>\n",
       "      <td>9229</td>\n",
       "      <td>OYO Krishna Cafe</td>\n",
       "      <td>433</td>\n",
       "      <td>Room</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>15602 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         sno                                     Hotel name    price  \\\n",
       "0      15628           Hôtel Le Royal Monceau Raffles Paris  2210576   \n",
       "1      15627           Hôtel Le Royal Monceau Raffles Paris  2122632   \n",
       "2      15626           Hôtel Le Royal Monceau Raffles Paris  2034687   \n",
       "3      16218  Le Bristol Paris - an Oetker Collection Hotel  1758893   \n",
       "4      16170                   La Réserve Paris Hotel & Spa  1332361   \n",
       "...      ...                                            ...      ...   \n",
       "15597   9362                     OYO Flagship The Crown Inn      589   \n",
       "15598   8480                                   Hotel Galaxy      500   \n",
       "15599   8503                    OYO Flagship Hotel Paradise      500   \n",
       "15600   9133                         OYO Muskan Guest House      433   \n",
       "15601   9229                               OYO Krishna Cafe      433   \n",
       "\n",
       "      Room_type Single_bed Double_bed  \n",
       "0         Suite         No        Yes  \n",
       "1         Suite         No        Yes  \n",
       "2         Suite         No        Yes  \n",
       "3         Suite         No        Yes  \n",
       "4         Suite         No        Yes  \n",
       "...         ...        ...        ...  \n",
       "15597      Room         No        Yes  \n",
       "15598      Room         No        Yes  \n",
       "15599      Room         No        Yes  \n",
       "15600      Room         No        Yes  \n",
       "15601      Room         No        Yes  \n",
       "\n",
       "[15602 rows x 6 columns]"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results=cursor.execute('Select * from Table_3 where Double_bed =\"Yes\"  ORDER BY price DESC')\n",
    "\n",
    "# Fetch all rows from the query results\n",
    "rows = results.fetchall()\n",
    "\n",
    "# Get the column names from the cursor description\n",
    "col = [column[0] for column in results.description]\n",
    "\n",
    "# Create a DataFrame from the query results and column names\n",
    "df10 = pd.DataFrame(rows, columns=col)\n",
    "\n",
    "df10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ee7dfe9e",
   "metadata": {},
   "outputs": [],
   "source": [
    "(sno INT PRIMARY KEY,'Hotel name' TEXT ,price INT,Room_type TEXT,Single_bed TEXT,Double_bed TEXT"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ef173ba",
   "metadata": {},
   "source": [
    "###    2   Write a SQL query to calculate the average price for each room type."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "9df4f459",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Room_type</th>\n",
       "      <th>Average_price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Apartment</td>\n",
       "      <td>27880.092949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Artisan</td>\n",
       "      <td>13119.600000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Classic</td>\n",
       "      <td>34415.352941</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Club</td>\n",
       "      <td>40707.979592</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Deluxe</td>\n",
       "      <td>23142.034014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Double</td>\n",
       "      <td>22226.222222</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Glam</td>\n",
       "      <td>13126.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>King</td>\n",
       "      <td>24192.211921</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Loft</td>\n",
       "      <td>26524.727273</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Louis</td>\n",
       "      <td>13786.625000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Penthouse</td>\n",
       "      <td>161838.800000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Premier</td>\n",
       "      <td>32657.733333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Premium</td>\n",
       "      <td>30693.709677</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Queen</td>\n",
       "      <td>15524.904762</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Room</td>\n",
       "      <td>19332.607882</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Standard</td>\n",
       "      <td>11304.526316</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Studio</td>\n",
       "      <td>18081.811321</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Suite</td>\n",
       "      <td>67807.431921</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Superior</td>\n",
       "      <td>15924.948718</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Twin</td>\n",
       "      <td>22017.387097</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>other</td>\n",
       "      <td>38845.275093</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Room_type  Average_price\n",
       "0   Apartment   27880.092949\n",
       "1     Artisan   13119.600000\n",
       "2     Classic   34415.352941\n",
       "3        Club   40707.979592\n",
       "4      Deluxe   23142.034014\n",
       "5      Double   22226.222222\n",
       "6        Glam   13126.750000\n",
       "7        King   24192.211921\n",
       "8        Loft   26524.727273\n",
       "9       Louis   13786.625000\n",
       "10  Penthouse  161838.800000\n",
       "11    Premier   32657.733333\n",
       "12    Premium   30693.709677\n",
       "13      Queen   15524.904762\n",
       "14       Room   19332.607882\n",
       "15   Standard   11304.526316\n",
       "16     Studio   18081.811321\n",
       "17      Suite   67807.431921\n",
       "18   Superior   15924.948718\n",
       "19       Twin   22017.387097\n",
       "20      other   38845.275093"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results=cursor.execute('Select Room_type,AVG(price) As Average_price from Table_3 group by Room_type')\n",
    "\n",
    "# Fetch all rows from the query results\n",
    "rows = results.fetchall()\n",
    "\n",
    "# Get the column names from the cursor description\n",
    "col = [column[0] for column in results.description]\n",
    "\n",
    "# Create a DataFrame from the query results and column names\n",
    "df11 = pd.DataFrame(rows, columns=col)\n",
    "\n",
    "df11"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0fc2b06",
   "metadata": {},
   "source": [
    " \n",
    "\n",
    "\n",
    "\n",
    "## From here we will be making SUBQUERIES including the data\n",
    "\n",
    "\n",
    "\n",
    "**from table 1/Table 2/Table 3**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "961b9db4",
   "metadata": {},
   "source": [
    "### 3     Write a query to find details of hotels with user ratings above 5 as a  threshold and that offer free WiFi. (Use table 1 and table 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "ccaf623d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sno</th>\n",
       "      <th>Hotel name</th>\n",
       "      <th>cities</th>\n",
       "      <th>location</th>\n",
       "      <th>number of reviews</th>\n",
       "      <th>user ratings</th>\n",
       "      <th>star rating</th>\n",
       "      <th>review score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Residence Inn by Marriott Manchester Piccadilly</td>\n",
       "      <td>Manchester</td>\n",
       "      <td>40 Laystall Street, Manchester, M1 2JZ, United...</td>\n",
       "      <td>349</td>\n",
       "      <td>9.1</td>\n",
       "      <td>4</td>\n",
       "      <td>8.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>ibis Budget Manchester Centre Pollard Street</td>\n",
       "      <td>Manchester</td>\n",
       "      <td>2 Pollard Street, Manchester, M4 7DB, United K...</td>\n",
       "      <td>7306</td>\n",
       "      <td>8.3</td>\n",
       "      <td>2</td>\n",
       "      <td>7.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "      <td>Motel One Manchester-Piccadilly</td>\n",
       "      <td>Manchester</td>\n",
       "      <td>34 London Road, Piccadilly, Manchester, M1 2PF...</td>\n",
       "      <td>12360</td>\n",
       "      <td>9.5</td>\n",
       "      <td>3</td>\n",
       "      <td>8.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5</td>\n",
       "      <td>The Ultimate Hen Suite with Bar &amp; Makeup Room</td>\n",
       "      <td>Manchester</td>\n",
       "      <td>46 Oldham Road, Manchester, M4 5EE, United Kin...</td>\n",
       "      <td>4</td>\n",
       "      <td>9.2</td>\n",
       "      <td>0</td>\n",
       "      <td>9.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7</td>\n",
       "      <td>Motel One Manchester-St. Peter´s Square</td>\n",
       "      <td>Manchester</td>\n",
       "      <td>1 Dickinson Street, Manchester, M1 4LF, United...</td>\n",
       "      <td>7911</td>\n",
       "      <td>9.6</td>\n",
       "      <td>3</td>\n",
       "      <td>8.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5102</th>\n",
       "      <td>6377</td>\n",
       "      <td>Tokyo Inn - Vacation STAY 11127v</td>\n",
       "      <td>Tokyo</td>\n",
       "      <td>143-0021 Tokyo-to, Kitamagome 2-31-6 Tokyo Inn...</td>\n",
       "      <td>1</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5103</th>\n",
       "      <td>6379</td>\n",
       "      <td>Tokyo Inn - Vacation STAY 10247v</td>\n",
       "      <td>Tokyo</td>\n",
       "      <td>143-0021 Tokyo-to, Kitamagome 2-31-6 Tokyo Inn...</td>\n",
       "      <td>2</td>\n",
       "      <td>7.5</td>\n",
       "      <td>0</td>\n",
       "      <td>6.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5104</th>\n",
       "      <td>6381</td>\n",
       "      <td>Tokyo Inn - Vacation STAY 11125v</td>\n",
       "      <td>Tokyo</td>\n",
       "      <td>143-0021 Tokyo-to, Kitamagome 2-31-6 Tokyo Inn...</td>\n",
       "      <td>6</td>\n",
       "      <td>9.2</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5105</th>\n",
       "      <td>6384</td>\n",
       "      <td>Sakura Sky Hotel - Vacation STAY 18449v</td>\n",
       "      <td>Tokyo</td>\n",
       "      <td>130-0022 Tokyo-to, Kotobashi 4-9-3 Sakura Sky ...</td>\n",
       "      <td>1</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5106</th>\n",
       "      <td>6385</td>\n",
       "      <td>Hotel Suntargas Ueno - Vacation STAY 08478v</td>\n",
       "      <td>Tokyo</td>\n",
       "      <td>110-0015 Tokyo-to, Higashiueno 2-19-3 Hotel Su...</td>\n",
       "      <td>6</td>\n",
       "      <td>9.2</td>\n",
       "      <td>0</td>\n",
       "      <td>8.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5107 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       sno                                       Hotel name      cities  \\\n",
       "0        1  Residence Inn by Marriott Manchester Piccadilly  Manchester   \n",
       "1        2     ibis Budget Manchester Centre Pollard Street  Manchester   \n",
       "2        4                  Motel One Manchester-Piccadilly  Manchester   \n",
       "3        5    The Ultimate Hen Suite with Bar & Makeup Room  Manchester   \n",
       "4        7          Motel One Manchester-St. Peter´s Square  Manchester   \n",
       "...    ...                                              ...         ...   \n",
       "5102  6377                 Tokyo Inn - Vacation STAY 11127v       Tokyo   \n",
       "5103  6379                 Tokyo Inn - Vacation STAY 10247v       Tokyo   \n",
       "5104  6381                 Tokyo Inn - Vacation STAY 11125v       Tokyo   \n",
       "5105  6384          Sakura Sky Hotel - Vacation STAY 18449v       Tokyo   \n",
       "5106  6385      Hotel Suntargas Ueno - Vacation STAY 08478v       Tokyo   \n",
       "\n",
       "                                               location  number of reviews  \\\n",
       "0     40 Laystall Street, Manchester, M1 2JZ, United...                349   \n",
       "1     2 Pollard Street, Manchester, M4 7DB, United K...               7306   \n",
       "2     34 London Road, Piccadilly, Manchester, M1 2PF...              12360   \n",
       "3     46 Oldham Road, Manchester, M4 5EE, United Kin...                  4   \n",
       "4     1 Dickinson Street, Manchester, M1 4LF, United...               7911   \n",
       "...                                                 ...                ...   \n",
       "5102  143-0021 Tokyo-to, Kitamagome 2-31-6 Tokyo Inn...                  1   \n",
       "5103  143-0021 Tokyo-to, Kitamagome 2-31-6 Tokyo Inn...                  2   \n",
       "5104  143-0021 Tokyo-to, Kitamagome 2-31-6 Tokyo Inn...                  6   \n",
       "5105  130-0022 Tokyo-to, Kotobashi 4-9-3 Sakura Sky ...                  1   \n",
       "5106  110-0015 Tokyo-to, Higashiueno 2-19-3 Hotel Su...                  6   \n",
       "\n",
       "      user ratings  star rating  review score  \n",
       "0              9.1            4           8.5  \n",
       "1              8.3            2           7.1  \n",
       "2              9.5            3           8.7  \n",
       "3              9.2            0           9.5  \n",
       "4              9.6            3           8.9  \n",
       "...            ...          ...           ...  \n",
       "5102          10.0            0          10.0  \n",
       "5103           7.5            0           6.5  \n",
       "5104           9.2            0           8.0  \n",
       "5105          10.0            0           6.0  \n",
       "5106           9.2            0           8.2  \n",
       "\n",
       "[5107 rows x 8 columns]"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = cursor.execute('SELECT t1.*  FROM Table_1 t1 WHERE t1.\"user ratings\" > 5 AND EXISTS (SELECT 1 FROM Table_2 t2 WHERE t2.\"Hotel name\" = t1.\"Hotel name\" AND t2.Free_wifi = \"Yes\")')\n",
    "\n",
    "\n",
    "# Fetch all rows from the query results\n",
    "rows = results.fetchall()\n",
    "\n",
    "# Get the column names from the cursor description\n",
    "col = [column[0] for column in results.description]\n",
    "\n",
    "# Create a DataFrame from the query results and column names\n",
    "df12 = pd.DataFrame(rows, columns=col)\n",
    "\n",
    "df12"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e2bf6388",
   "metadata": {},
   "source": [
    "###  4    Write a query to find hotels that offer both family rooms and non-smoking rooms(Use table 1 and Table 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "8236b3c7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sno</th>\n",
       "      <th>Hotel name</th>\n",
       "      <th>cities</th>\n",
       "      <th>location</th>\n",
       "      <th>number of reviews</th>\n",
       "      <th>user ratings</th>\n",
       "      <th>star rating</th>\n",
       "      <th>review score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Residence Inn by Marriott Manchester Piccadilly</td>\n",
       "      <td>Manchester</td>\n",
       "      <td>40 Laystall Street, Manchester, M1 2JZ, United...</td>\n",
       "      <td>349</td>\n",
       "      <td>9.1</td>\n",
       "      <td>4</td>\n",
       "      <td>8.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>ibis Budget Manchester Centre Pollard Street</td>\n",
       "      <td>Manchester</td>\n",
       "      <td>2 Pollard Street, Manchester, M4 7DB, United K...</td>\n",
       "      <td>7306</td>\n",
       "      <td>8.3</td>\n",
       "      <td>2</td>\n",
       "      <td>7.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Sachas Hotel Manchester</td>\n",
       "      <td>Manchester</td>\n",
       "      <td>Tib Street, Piccadilly, Manchester, M4 1SH, Un...</td>\n",
       "      <td>12353</td>\n",
       "      <td>8.3</td>\n",
       "      <td>3</td>\n",
       "      <td>5.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6</td>\n",
       "      <td>Britannia Hotel City Centre Manchester</td>\n",
       "      <td>Manchester</td>\n",
       "      <td>35 Portland Street, Manchester, M1 3LA, United...</td>\n",
       "      <td>21005</td>\n",
       "      <td>8.6</td>\n",
       "      <td>3</td>\n",
       "      <td>5.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9</td>\n",
       "      <td>Milton Manchester Hotel</td>\n",
       "      <td>Manchester</td>\n",
       "      <td>Milton Manchester Hotel Sentinel House Block B...</td>\n",
       "      <td>3851</td>\n",
       "      <td>8.2</td>\n",
       "      <td>3</td>\n",
       "      <td>7.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3907</th>\n",
       "      <td>6331</td>\n",
       "      <td>MIMARU Tokyo STATION EAST</td>\n",
       "      <td>Tokyo</td>\n",
       "      <td>104-0032 Tokyo-to, Chuo-ku Hatchobori 1-12-8, ...</td>\n",
       "      <td>242</td>\n",
       "      <td>10.0</td>\n",
       "      <td>4</td>\n",
       "      <td>8.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3908</th>\n",
       "      <td>6350</td>\n",
       "      <td>YADOYA 雀</td>\n",
       "      <td>Tokyo</td>\n",
       "      <td>111-0032 Tokyo-to, 台東区浅草6-35-3, Japan – Show map</td>\n",
       "      <td>34</td>\n",
       "      <td>7.3</td>\n",
       "      <td>3</td>\n",
       "      <td>7.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3909</th>\n",
       "      <td>6352</td>\n",
       "      <td>東駒形コマホテル【Koma Hotel】</td>\n",
       "      <td>Tokyo</td>\n",
       "      <td>130-0005 Tokyo-to, 墨田区東駒形１−１８−７, Japan – Show ...</td>\n",
       "      <td>53</td>\n",
       "      <td>6.5</td>\n",
       "      <td>0</td>\n",
       "      <td>5.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3910</th>\n",
       "      <td>6363</td>\n",
       "      <td>japan house edogawabashi</td>\n",
       "      <td>Tokyo</td>\n",
       "      <td>162-0801 Tokyo-to, 東京都新宿区山吹町３６１番１, Japan – Goo...</td>\n",
       "      <td>112</td>\n",
       "      <td>7.9</td>\n",
       "      <td>0</td>\n",
       "      <td>7.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3911</th>\n",
       "      <td>6372</td>\n",
       "      <td>moire HOTEL YOSHIWARA</td>\n",
       "      <td>Tokyo</td>\n",
       "      <td>111-0031 Tokyo-to, 4−15−11 千束, Japan – Good lo...</td>\n",
       "      <td>38</td>\n",
       "      <td>8.8</td>\n",
       "      <td>0</td>\n",
       "      <td>8.6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3912 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       sno                                       Hotel name      cities  \\\n",
       "0        1  Residence Inn by Marriott Manchester Piccadilly  Manchester   \n",
       "1        2     ibis Budget Manchester Centre Pollard Street  Manchester   \n",
       "2        3                          Sachas Hotel Manchester  Manchester   \n",
       "3        6           Britannia Hotel City Centre Manchester  Manchester   \n",
       "4        9                          Milton Manchester Hotel  Manchester   \n",
       "...    ...                                              ...         ...   \n",
       "3907  6331                        MIMARU Tokyo STATION EAST       Tokyo   \n",
       "3908  6350                                         YADOYA 雀       Tokyo   \n",
       "3909  6352                             東駒形コマホテル【Koma Hotel】       Tokyo   \n",
       "3910  6363                         japan house edogawabashi       Tokyo   \n",
       "3911  6372                            moire HOTEL YOSHIWARA       Tokyo   \n",
       "\n",
       "                                               location  number of reviews  \\\n",
       "0     40 Laystall Street, Manchester, M1 2JZ, United...                349   \n",
       "1     2 Pollard Street, Manchester, M4 7DB, United K...               7306   \n",
       "2     Tib Street, Piccadilly, Manchester, M4 1SH, Un...              12353   \n",
       "3     35 Portland Street, Manchester, M1 3LA, United...              21005   \n",
       "4     Milton Manchester Hotel Sentinel House Block B...               3851   \n",
       "...                                                 ...                ...   \n",
       "3907  104-0032 Tokyo-to, Chuo-ku Hatchobori 1-12-8, ...                242   \n",
       "3908   111-0032 Tokyo-to, 台東区浅草6-35-3, Japan – Show map                 34   \n",
       "3909  130-0005 Tokyo-to, 墨田区東駒形１−１８−７, Japan – Show ...                 53   \n",
       "3910  162-0801 Tokyo-to, 東京都新宿区山吹町３６１番１, Japan – Goo...                112   \n",
       "3911  111-0031 Tokyo-to, 4−15−11 千束, Japan – Good lo...                 38   \n",
       "\n",
       "      user ratings  star rating  review score  \n",
       "0              9.1            4           8.5  \n",
       "1              8.3            2           7.1  \n",
       "2              8.3            3           5.7  \n",
       "3              8.6            3           5.7  \n",
       "4              8.2            3           7.2  \n",
       "...            ...          ...           ...  \n",
       "3907          10.0            4           8.9  \n",
       "3908           7.3            3           7.8  \n",
       "3909           6.5            0           5.5  \n",
       "3910           7.9            0           7.4  \n",
       "3911           8.8            0           8.6  \n",
       "\n",
       "[3912 rows x 8 columns]"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = cursor.execute('SELECT t1.*  FROM Table_1 t1 WHERE  EXISTS (SELECT 1 FROM Table_2 t2 WHERE t2.\"Hotel name\" = t1.\"Hotel name\" AND t2.Family_Rooms= \"Yes\" AND t2.Non_Smoking_Rooms= \"Yes\")')\n",
    "\n",
    "\n",
    "# Fetch all rows from the query results\n",
    "rows = results.fetchall()\n",
    "\n",
    "# Get the column names from the cursor description\n",
    "col = [column[0] for column in results.description]\n",
    "\n",
    "# Create a DataFrame from the query results and column names\n",
    "df13 = pd.DataFrame(rows, columns=col)\n",
    "\n",
    "df13"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0b19338",
   "metadata": {},
   "source": [
    "\n",
    "### 5    Write a query to calculate the average price for each room type (Use table2 and Table 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "41a4e0ad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Room_type</th>\n",
       "      <th>Average_price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Apartment</td>\n",
       "      <td>27880.092949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Artisan</td>\n",
       "      <td>13119.600000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Classic</td>\n",
       "      <td>34415.352941</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Club</td>\n",
       "      <td>40707.979592</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Deluxe</td>\n",
       "      <td>23142.034014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Double</td>\n",
       "      <td>22226.222222</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Glam</td>\n",
       "      <td>13126.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>King</td>\n",
       "      <td>24192.211921</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Loft</td>\n",
       "      <td>26524.727273</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Louis</td>\n",
       "      <td>13786.625000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Penthouse</td>\n",
       "      <td>161838.800000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Premier</td>\n",
       "      <td>32657.733333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Premium</td>\n",
       "      <td>30693.709677</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Queen</td>\n",
       "      <td>15524.904762</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Room</td>\n",
       "      <td>19332.607882</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Standard</td>\n",
       "      <td>11304.526316</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Studio</td>\n",
       "      <td>18081.811321</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Suite</td>\n",
       "      <td>67807.431921</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Superior</td>\n",
       "      <td>15924.948718</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Twin</td>\n",
       "      <td>22017.387097</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>other</td>\n",
       "      <td>38845.275093</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Room_type  Average_price\n",
       "0   Apartment   27880.092949\n",
       "1     Artisan   13119.600000\n",
       "2     Classic   34415.352941\n",
       "3        Club   40707.979592\n",
       "4      Deluxe   23142.034014\n",
       "5      Double   22226.222222\n",
       "6        Glam   13126.750000\n",
       "7        King   24192.211921\n",
       "8        Loft   26524.727273\n",
       "9       Louis   13786.625000\n",
       "10  Penthouse  161838.800000\n",
       "11    Premier   32657.733333\n",
       "12    Premium   30693.709677\n",
       "13      Queen   15524.904762\n",
       "14       Room   19332.607882\n",
       "15   Standard   11304.526316\n",
       "16     Studio   18081.811321\n",
       "17      Suite   67807.431921\n",
       "18   Superior   15924.948718\n",
       "19       Twin   22017.387097\n",
       "20      other   38845.275093"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results=cursor.execute('Select Room_type,AVG(price) As Average_price from Table_3 group by Room_type')\n",
    "\n",
    "# Fetch all rows from the query results\n",
    "rows = results.fetchall()\n",
    "\n",
    "# Get the column names from the cursor description\n",
    "col = [column[0] for column in results.description]\n",
    "\n",
    "# Create a DataFrame from the query results and column names\n",
    "df14 = pd.DataFrame(rows, columns=col)\n",
    "\n",
    "df14"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "339.556px"
   },
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
